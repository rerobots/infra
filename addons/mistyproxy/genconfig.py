#!/usr/bin/env python
"""Generate nginx configuration for use of Misty API Explorer as reverse proxy


SCL <scott@rerobots>
Copyright (C) 2018 rerobots, Inc.
"""
import hashlib
import os
import sys


TEMPLATE="""# Automatically generated by addons/mistyproxy/genconfig.py
# by rerobots, Inc.


worker_processes 4;

events {{
    worker_connections 1024;
}}

http {{
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;

    map $http_upgrade $connection_upgrade {{
        default upgrade;
        '' close;
    }}

    upstream app_server {{
        server {UPSTREAM} fail_timeout=0;
    }}

    server {{
        listen 80 default_server;
        listen [::]:80 default_server;

        location /{TOKEN}:80 {{
            rewrite /{TOKEN}:80(.*)$ $1 break;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_buffering off;
            proxy_pass http://app_server;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }}

        location /{TOKEN} {{
            rewrite /{TOKEN}(.*)$ $1 break;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_buffering off;
            proxy_pass http://app_server;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }}

        location / {{
            return 404;
        }}

    }}
}}
"""

if '-h' in sys.argv:
    token = sys.argv[sys.argv.index('-h')+1]
else:
    token = hashlib.sha256(os.urandom(128)).hexdigest()

if '-t' in sys.argv:
    upstream = sys.argv[sys.argv.index('-t')+1]
else:
    upstream = '127.0.0.1:8000'

with open('/etc/nginx/nginx.conf', 'wt') as fp:
    fp.write(TEMPLATE.format(TOKEN=token, UPSTREAM=upstream))

os.execvp('nginx', ['nginx', '-g daemon off;'])
