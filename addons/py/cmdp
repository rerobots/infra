#!/usr/bin/env python
"""Accept authenticated requests and run commands locally to this process

    docker run --name {NAME} --read-only --mount=tmpfs,destination=/tmp,tmpfs-size=10485760 -p 127.0.0.1::8888 --rm -m 104857600 --pids-limit 10 rerobots-addons/py:latest {TOKEN}


SCL <scott@rerobots>
Copyright (C) 2020 rerobots, Inc.
"""
import asyncio
import os
import subprocess
import sys
import tempfile

import aiohttp
from aiohttp import web


async def command_ws(request):
    wsock = web.WebSocketResponse(autoping=True, heartbeat=5.0)
    await wsock.prepare(request)

    async for msg in wsock:
        if msg.type == aiohttp.WSMsgType.CLOSED or msg.type == aiohttp.WSMsgType.ERROR:
            break

        if msg.type == aiohttp.WSMsgType.TEXT:
            fd, fpath = tempfile.mkstemp()
            fp = os.fdopen(fd, 'wt')
            fp.write(msg.data)
            fp.flush()
            fp.close()
            cp = await asyncio.create_subprocess_exec(*['python3', fpath], stdin=None, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            while True:
                li = await cp.stdout.readline()
                if len(li) > 0:
                    await wsock.send_str(li.decode())
                if cp.stdout.at_eof():
                    # TODO: wait for process to terminate?
                    break
            os.unlink(fpath)

        else:
            # TODO: treat binary, e.g., compressed payload?
            pass

    return wsock


async def empty_root(request):
    return web.json_response()


def create_app(argv=None):
    """Parse CLI args, and return Web app.
    """
    if argv is None:
        argv = sys.argv[1:]
    if '--host' in sys.argv:
        ind = argv.index('--host')
        bindhost = argv[ind + 1]
        del argv[ind]
        del argv[ind]
    else:
        bindhost = '0.0.0.0'

    assert len(argv) == 1
    assert len(argv[0]) > 0

    token = argv[0]

    app = web.Application()
    app.router.add_get(r'/' + token, command_ws)
    app.router.add_get(r'/', empty_root)

    return app, bindhost


if __name__ == '__main__':
    app, bindhost = create_app()
    web.run_app(app, host=bindhost, port=8888)
